var searchIndex = JSON.parse('{\
"ocr_lang":{"doc":"OCR-lang is an interpreter for OCR Exam Reference, the …","t":[0,0,0,5,0,5,0,3,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,11,11,11,11,11,11,11,5,11,11,12,12,11,11,11,11,11,11,3,11,11,11,12,12,11,11,11,11,12,12,11,11,11,3,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,12,12,12,12],"n":["args","error","lexer","ocr_lang_main","position","setup_logging","token","Args","Debug","Error","Info","LogLevel","Off","Trace","Warn","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","filename","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","log_level","to_level_filter","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","Error","ErrorKind","IOError","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","handle_error","into","into","kind","msg","try_from","try_from","try_into","try_into","type_id","type_id","Lexer","advance","borrow","borrow_mut","current_char","filename","from","into","lex","new","pos","stream","try_from","try_into","type_id","Position","advance","borrow","borrow_mut","column","filename","fmt","fmt","from","into","line","start","to_string","try_from","try_into","type_id","And","Array","AssignEq","ByRef","ByVal","Case","Class","Colon","Comma","Div","Do","Dot","Else","ElseIf","EndClass","EndFunction","EndIf","EndProcedure","EndSwitch","EndWhile","EqTo","Exp","FloatLiteral","FloorDiv","For","Function","Ge","Global","Gt","Identifier","If","Inherits","IntegerLiteral","LParen","LSquareParen","Le","Lt","Minus","Mod","Mul","Ne","New","Next","Not","Or","Plus","Private","Procedure","Public","RParen","RSquareParen","Return","StringLiteral","Switch","Then","To","Token","Until","While","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","0","0","0","0"],"q":["ocr_lang","","","","","","","ocr_lang::args","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocr_lang::error","","","","","","","","","","","","","","","","","","","","","ocr_lang::lexer","","","","","","","","","","","","","","","ocr_lang::position","","","","","","","","","","","","","","","","ocr_lang::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocr_lang::token::Token","","",""],"d":["","","","The main function for this program. Parses arguments, …","","Initialise logging. Copy-pasted from Fern docs","","","","","","This is needed. See rust-lang/log#524","","","","","","","","","","","","","","File to run. If not given, defaults to stdin, which does …","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Level to log messages at","","","","","","","","","","","","","Struct to represent an error","Enum to represent the diferent kinds of errors","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Prints the error nicely to the console and exits with code …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Struct to transform input into <code>Token</code>s","Advance the <code>Lexer</code>. Reads one byte from the input stream …","","","Character that we are currently processing","The file name that we are lexing","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Transform into <code>Vec&lt;Token&gt;</code>. Returns <code>Err</code> if we could not …","Create a new <code>Lexer</code>","Our position in the text we are lexing","Stream that we are reading our input from","","","","Struct to represent the position we are at in the text we …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enum for tokens","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,6,6,6,1,6,1,1,1,6,6,6,6,1,6,6,6,6,1,6,1,1,1,6,1,6,1,6,1,6,6,1,0,0,13,16,13,16,13,13,16,13,0,16,13,16,16,16,13,16,13,16,13,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,26,27,28,29],"f":[0,0,0,[[]],0,[1,[[3,[2]]]],0,0,0,0,0,0,0,0,0,[4,4],[4,4],[[]],[[]],[[]],[[]],[1,1],[[]],[[],4],[[],4],0,[[]],[[]],[5,[[3,[6,7]]]],[5,[[3,[6,7]]]],[[],[[9,[8]]]],[[]],[[]],0,[1,10],[[]],[1,[[9,[11]]]],[[],3],[[],3],[[],3],[[],3],[[],12],[[],12],[[6,5],[[3,[7]]]],[[6,5],[[3,[7]]]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[13,14],15],[[]],[[]],[16],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],12],[[],12],0,[17,18],[[]],[[]],0,0,[[]],[[]],[17,[[3,[[20,[19]],16]]]],[[[22,[21]],23],17],0,0,[[],3],[[],3],[[],12],0,[[24,25]],[[]],[[]],0,0,[[24,14],15],[[24,14],15],[[]],[[]],0,[23,24],[[],23],[[],3],[[],3],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[19,14],15],[[]],[[]],[[],3],[[],3],[[],12],0,0,0,0],"p":[[4,"LogLevel"],[4,"InitError"],[4,"Result"],[3,"Command"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[4,"Option"],[4,"LevelFilter"],[3,"PossibleValue"],[3,"TypeId"],[4,"ErrorKind"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Lexer"],[6,"Result"],[4,"Token"],[3,"Vec"],[8,"Read"],[3,"Box"],[3,"String"],[3,"Position"],[15,"char"],[13,"Identifier"],[13,"StringLiteral"],[13,"IntegerLiteral"],[13,"FloatLiteral"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
