var searchIndex = JSON.parse('{\
"ocr_lang":{"doc":"OCR-lang is an interpreter for OCR Exam Reference, the …","t":[0,0,0,5,0,5,0,13,3,13,13,13,13,13,4,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,11,11,11,11,11,11,11,11,5,11,11,12,12,12,11,11,11,11,11,11,11,3,11,11,11,12,12,11,11,11,11,12,12,11,11,11,3,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,12,12,12,12],"n":["args","error","lexer","ocr_lang_main","position","setup_logging","token","A2","Args","As","Debug","Error","Gcse","Info","LogLevel","Off","Specification","Trace","Warn","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command_for_update","filename","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","into","log_level","spec","to_level_filter","to_owned","to_owned","to_possible_value","to_possible_value","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","value_variants","Error","ErrorKind","IOError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","handle_error","into","into","kind","msg","pos","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Lexer","advance","borrow","borrow_mut","current_char","filename","from","into","lex","new","pos","stream","try_from","try_into","type_id","Position","advance","borrow","borrow_mut","column","filename","fmt","fmt","from","into","line","start","to_string","try_from","try_into","type_id","And","Array","AssignEq","ByRef","ByVal","Case","Class","Colon","Comma","Div","Do","Dot","Else","ElseIf","EndClass","EndFunction","EndIf","EndProcedure","EndSwitch","EndWhile","EqTo","Exp","FloatLiteral","FloorDiv","For","Function","Ge","Global","Gt","Identifier","If","Inherits","IntegerLiteral","LParen","LSquareParen","Le","Lt","Minus","Mod","Mul","Ne","New","Next","Not","Or","Plus","Private","Procedure","Public","RParen","RSquareParen","Return","StringLiteral","Switch","Then","To","Token","Until","While","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","0","0","0","0"],"q":["ocr_lang","","","","","","","ocr_lang::args","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocr_lang::error","","","","","","","","","","","","","","","","","","","","","","","","ocr_lang::lexer","","","","","","","","","","","","","","","ocr_lang::position","","","","","","","","","","","","","","","","ocr_lang::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ocr_lang::token::Token","","",""],"d":["","","","The main function for this program. Parses arguments, …","","Initialise logging. Copy-pasted from Fern docs","","A-Level. AS with OOP","","AS-Level. GCSE with pass-by-value and -reference","","","Core language.","","Enum for logging levels in args. This is needed, because …","","Enum for what specification to run the code at.","","","","","","","","","","","","","","","","","File to run. If not given, defaults to stdin, which does …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Level to log messages at","Specification to run the code at","Convert one-to-one to <code>log::LevelFilter</code>","","","","","","","","","","","","","","","","","","Struct to represent an error","Enum to represent the diferent kinds of errors","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Prints the error nicely to the console and exits with code …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Struct to transform input into <code>Token</code>s","Advance the <code>Lexer</code>. Reads one byte from the input stream …","","","Character that we are currently processing","The file name that we are lexing","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Transform into <code>Vec&lt;Token&gt;</code>. Returns <code>Err</code> if we could not …","Create a new <code>Lexer</code>","Our position in the text we are lexing","Stream that we are reading our input from","","","","Struct to represent the position we are at in the text we …","Advance this <code>Position</code> to <code>char</code>. Increments <code>line</code> and also …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Return a <code>Position</code> at the start of a file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enum for tokens","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,5,0,5,1,1,5,1,0,1,0,1,1,7,7,7,1,5,7,1,5,1,5,1,5,7,7,7,7,1,5,7,7,7,7,1,5,7,7,1,1,5,1,5,7,1,5,7,1,5,7,1,5,7,7,1,5,0,0,17,14,17,14,17,14,17,14,17,0,14,17,14,14,14,14,14,17,14,17,14,17,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,20,20,20,20,20,20,20,20,20,26,27,28,29],"f":[0,0,0,[[]],0,[1,[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[4,4],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[5,5],[[]],[[]],[[],4],[[],4],0,[[]],[[]],[[]],[6,[[3,[7,8]]]],[6,[[3,[7,8]]]],[[],[[10,[9]]]],[[]],[[]],[[]],0,0,[1,11],[[]],[[]],[1,[[10,[12]]]],[5,[[10,[12]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],13],[[],13],[[],13],[[7,6],[[3,[8]]]],[[7,6],[[3,[8]]]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[14,15],16],[[17,15],16],[[]],[[]],[14],[[]],[[]],0,0,0,[[],18],[[],3],[[],3],[[],3],[[],3],[[],13],[[],13],0,[19,[[3,[14]]]],[[]],[[]],0,0,[[]],[[]],[19,[[3,[[21,[20]],14]]]],[[[23,[22]],18],19],0,0,[[],3],[[],3],[[],13],0,[[24,25]],[[]],[[]],0,0,[[24,15],16],[[24,15],16],[[]],[[]],0,[18,24],[[],18],[[],3],[[],3],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[20,15],16],[[]],[[]],[[],3],[[],3],[[],13],0,0,0,0],"p":[[4,"LogLevel"],[4,"InitError"],[4,"Result"],[3,"Command"],[4,"Specification"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[4,"Option"],[4,"LevelFilter"],[3,"PossibleValue"],[3,"TypeId"],[3,"Error"],[3,"Formatter"],[6,"Result"],[4,"ErrorKind"],[3,"String"],[3,"Lexer"],[4,"Token"],[3,"Vec"],[8,"Read"],[3,"Box"],[3,"Position"],[15,"char"],[13,"Identifier"],[13,"StringLiteral"],[13,"IntegerLiteral"],[13,"FloatLiteral"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
