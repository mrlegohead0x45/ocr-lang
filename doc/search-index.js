var searchIndex = JSON.parse('{\
"cli":{"doc":"","t":[0,5,5,5,13,3,13,13,13,13,13,4,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["args","handle_error","main","setup_logging","A2","Args","As","Debug","Error","Gcse","Info","LogLevel","Off","Specification","Trace","Warn","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command_for_update","filename","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","into","log_level","spec","to_level_filter","to_owned","to_owned","to_possible_value","to_possible_value","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","value_variants"],"q":["cli","","","","cli::args","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Print an error and exit code 1","","Initialise logging. Copy-pasted from Fern docs","A-Level. AS with OOP","","AS-Level. GCSE with pass-by-value and -reference","","","Core language.","","Enum for logging levels in args. This is needed, because …","","Enum for what specification to run the code at.","","","","","","","","","","","","","","","","","File to run. If not given, defaults to stdin, which does …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Level to log messages at","Specification to run the code at","Convert one-to-one to <code>log::LevelFilter</code>","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,6,0,6,2,2,6,2,0,2,0,2,2,8,8,8,2,6,8,2,6,2,6,2,6,8,8,8,8,2,6,8,8,8,8,2,6,8,8,2,2,6,2,6,8,2,6,8,2,6,8,2,6,8,8,2,6],"f":[0,[1],[[]],[2,[[4,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,[5,5],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[6,6],[[]],[[]],[[],5],[[],5],0,[[]],[[]],[[]],[7,[[4,[8,9]]]],[7,[[4,[8,9]]]],[[],[[11,[10]]]],[[]],[[]],[[]],0,0,[2,12],[[]],[[]],[2,[[11,[13]]]],[6,[[11,[13]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],14],[[],14],[[],14],[[8,7],[[4,[9]]]],[[8,7],[[4,[9]]]],[[]],[[]]],"p":[[3,"Error"],[4,"LogLevel"],[4,"InitError"],[4,"Result"],[3,"Command"],[4,"Specification"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[4,"Option"],[4,"LevelFilter"],[3,"PossibleValue"],[3,"TypeId"]]},\
"core":{"doc":"","t":[3,4,13,3,12,0,12,12,0,12,12,12,0,12,0,3,4,13,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,3,11,11,11,12,12,11,11,11,11,12,12,11,11,11,3,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Error","ErrorKind","IOError","Lexer","current_char","error","filename","kind","lexer","msg","pos","pos","position","stream","token","Error","ErrorKind","IOError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","kind","msg","pos","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Lexer","advance","borrow","borrow_mut","current_char","filename","from","into","lex","new","pos","stream","try_from","try_into","type_id","Position","advance","borrow","borrow_mut","column","filename","fmt","fmt","from","into","line","start","to_string","try_from","try_into","type_id","And","Array","AssignEq","ByRef","ByVal","Case","Class","Colon","Comma","Div","Do","Dot","Else","ElseIf","EndClass","EndFunction","EndIf","EndProcedure","EndSwitch","EndWhile","EqTo","Exp","FloatLiteral","FloorDiv","For","Function","Ge","Global","Gt","Identifier","If","Inherits","IntegerLiteral","LParen","LSquareParen","Le","Lt","Minus","Mod","Mul","Ne","New","Next","Not","Or","Plus","Private","Procedure","Public","RParen","RSquareParen","Return","StringLiteral","Switch","Then","To","Token","Until","While","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","0","0","0","0"],"q":["core","","","","","","","","","","","","","","","core::error","","","","","","","","","","","","","","","","","","","","","","","core::lexer","","","","","","","","","","","","","","","core::position","","","","","","","","","","","","","","","","core::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core::token::Token","","",""],"d":["Struct to represent an error","Enum to represent the diferent kinds of errors","","Struct to transform input into <code>Token</code>s","Character that we are currently processing","","The file name that we are lexing","","","","","Our position in the text we are lexing","","Stream that we are reading our input from","","Struct to represent an error","Enum to represent the diferent kinds of errors","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Struct to transform input into <code>Token</code>s","Advance the <code>Lexer</code>. Reads one byte from the input stream …","","","Character that we are currently processing","The file name that we are lexing","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Transform into <code>Vec&lt;Token&gt;</code>. Returns <code>Err</code> if we could not …","Create a new <code>Lexer</code>","Our position in the text we are lexing","Stream that we are reading our input from","","","","Struct to represent the position we are at in the text we …","Advance this <code>Position</code> to <code>char</code>. Increments <code>line</code> and also …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Return a <code>Position</code> at the start of a file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enum for tokens","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,4,0,8,0,8,1,0,1,1,8,0,8,0,0,0,4,1,4,1,4,1,4,1,4,1,4,1,1,1,1,1,4,1,4,1,4,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,15,16,17,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],3],[[4,2],3],[[]],[[]],[[]],[[]],0,0,0,[[],5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[8,[[6,[1]]]],[[]],[[]],0,0,[[]],[[]],[8,[[6,[[10,[9]],1]]]],[[[12,[11]],5],8],0,0,[[],6],[[],6],[[],7],0,[[13,14]],[[]],[[]],0,0,[[13,2],3],[[13,2],3],[[]],[[]],0,[5,13],[[],5],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[9,2],3],[[]],[[]],[[],6],[[],6],[[],7],0,0,0,0],"p":[[3,"Error"],[3,"Formatter"],[6,"Result"],[4,"ErrorKind"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Lexer"],[4,"Token"],[3,"Vec"],[8,"Read"],[3,"Box"],[3,"Position"],[15,"char"],[13,"Identifier"],[13,"StringLiteral"],[13,"IntegerLiteral"],[13,"FloatLiteral"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
